(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{514:function(v,_,o){"use strict";o.r(_);var l=o(25),t=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),_("p",[v._v("当我们学习一个编程语言时，不可避免地会涉及其数据类型和数据语言。数据在任何编程语言中都是至关重要的基础。")]),v._v(" "),_("h2",{attrs:{id:"node-js-数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-js-数据类型"}},[v._v("#")]),v._v(" Node.js 数据类型")]),v._v(" "),_("p",[v._v("众所周知，在 "),_("code",[v._v("Node.js")]),v._v(" 中的数据类型主要分为两种，"),_("code",[v._v("原始类型")]),v._v("（即基本数据类型）和"),_("code",[v._v("对象类型")]),v._v("（即引用数据类型）")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("基本数据类型")]),v._v(":")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("字符串 (String)")]),v._v(": 表示文本数据，用单引号 ('') 或双引号 (\"\") 包围。")]),v._v(" "),_("li",[_("strong",[v._v("数字 (Number)")]),v._v(": 表示数值，可以是整数或浮点数。")]),v._v(" "),_("li",[_("strong",[v._v("布尔值 (Boolean)")]),v._v(": 表示逻辑值，只有 true 和 false 两个取值。")]),v._v(" "),_("li",[_("strong",[v._v("空值 (Null)")]),v._v(": 表示无值。")]),v._v(" "),_("li",[_("strong",[v._v("未定义 (Undefined)")]),v._v(": 表示未定义的值。")]),v._v(" "),_("li",[_("strong",[v._v("符号 (Symbol)")]),v._v(": 表示唯一的标识符。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("引用数据类型")]),v._v(":")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("对象 (Object)")]),v._v(": 表示复杂的数据结构，可以存储多个键值对。")]),v._v(" "),_("li",[_("strong",[v._v("数组 (Array)")]),v._v(": 是一种特殊的对象，用于按顺序存储多个值。")]),v._v(" "),_("li",[_("strong",[v._v("函数 (Function)")]),v._v(": 是一种特殊的对象，用于执行特定任务的代码块。")])])])]),v._v(" "),_("p",[v._v("我们都知道 "),_("code",[v._v("Node.js")]),v._v(" 是动态类型语言，变量可以根据需要在这些数据类型之间自由转换。")]),v._v(" "),_("h2",{attrs:{id:"rust-数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rust-数据类型"}},[v._v("#")]),v._v(" Rust 数据类型")]),v._v(" "),_("p",[v._v("相对于 "),_("code",[v._v("Node.js")]),v._v(" 的数据类型，作为静态语言的 "),_("code",[v._v("Rust")]),v._v(" 的数据类型更为复杂一些")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("标量数据类型")]),v._v(":\n"),_("ul",[_("li",[_("strong",[v._v("整数类型")]),v._v("：\n"),_("ul",[_("li",[_("code",[v._v("i8")]),v._v(", "),_("code",[v._v("i16")]),v._v(", "),_("code",[v._v("i32")]),v._v(", "),_("code",[v._v("i64")]),v._v(", "),_("code",[v._v("i128")]),v._v(": 有符号整数类型，分别表示 8、16、32、64、128 位。")]),v._v(" "),_("li",[_("code",[v._v("u8")]),v._v(", "),_("code",[v._v("u16")]),v._v(", "),_("code",[v._v("u32")]),v._v(", "),_("code",[v._v("u64")]),v._v(", "),_("code",[v._v("u128")]),v._v(": 无符号整数类型，分别表示 8、16、32、64、128 位。")]),v._v(" "),_("li",[_("code",[v._v("isize")]),v._v(", "),_("code",[v._v("usize")]),v._v(": 分别表示指针大小的有符号和无符号整数类型。")])])]),v._v(" "),_("li",[_("strong",[v._v("浮点数类型")]),v._v("：\n"),_("ul",[_("li",[_("code",[v._v("f32")]),v._v(": 单精度浮点数。")]),v._v(" "),_("li",[_("code",[v._v("f64")]),v._v(": 双精度浮点数。")])])]),v._v(" "),_("li",[_("strong",[v._v("布尔类型")]),v._v("：\n"),_("ul",[_("li",[_("code",[v._v("bool")]),v._v(": 可以是 "),_("code",[v._v("true")]),v._v(" 或 "),_("code",[v._v("false")]),v._v("。")])])]),v._v(" "),_("li",[_("strong",[v._v("字符类型")]),v._v("：\n"),_("ul",[_("li",[_("code",[v._v("char")]),v._v(": 单个 Unicode 字符，存储为 4 个字节")])])]),v._v(" "),_("li",[_("strong",[v._v("单元类型")]),v._v(" "),_("ul",[_("li",[v._v("即 () ，其唯一的值也是 ()")])])])])]),v._v(" "),_("li",[_("strong",[v._v("复合数据类型")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("字符串类型")]),v._v(" "),_("ul",[_("li",[v._v("对，没错，就是你想的那个"),_("code",[v._v("String")]),v._v("，在 "),_("code",[v._v("Rust")]),v._v(" 中"),_("code",[v._v("String")]),v._v(" 类型是动态分配的、可变长度的 "),_("code",[v._v("UTF-8")]),v._v(" 字符串类型。")])])]),v._v(" "),_("li",[_("strong",[v._v("元组类型")]),v._v(" "),_("ul",[_("li",[v._v("元组是由多种类型组合到一起形成的，元组的长度是固定的，元组中元素的顺序也是固定的。")])])]),v._v(" "),_("li",[_("strong",[v._v("数组类型")]),v._v(" "),_("ul",[_("li",[v._v("元组是将相同类型的数据按顺序组织在一起的，数组的长度是固定的，数组中元素的顺序也是固定的。")])])]),v._v(" "),_("li",[_("strong",[v._v("枚举类型")]),v._v(" "),_("ul",[_("li",[v._v("枚举类型是一个类型，它会包含所有可能的枚举成员, 而枚举值是该类型中的具体某个成员的实例。")])])]),v._v(" "),_("li",[_("strong",[v._v("结构体")]),v._v(" "),_("ul",[_("li",[v._v("由多种类型组合而成。但是与元组不同的是，结构体可以为内部的每个字段起一个富有含义的名称。因此结构体更加灵活更加强大，你无需依赖这些字段的顺序来访问和解析它们。")])])])])])]),v._v(" "),_("p",[v._v("作为静态语言，"),_("code",[v._v("Rust")]),v._v(" 无法在这些数据类型之间自由转换，但也有属于自己的一套隐式转换和显示转换规则，在后续的章节中我们一起讨论。")])])}),[],!1,null,null,null);_.default=t.exports}}]);