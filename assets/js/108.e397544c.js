(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{457:function(s,t,a){"use strict";a.r(t);var n=a(10),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"常量和变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量和变量"}},[s._v("#")]),s._v(" 常量和变量")]),s._v(" "),t("h2",{attrs:{id:"常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[s._v("#")]),s._v(" 常量")]),s._v(" "),t("p",[s._v("虽然在 "),t("code",[s._v("Node.js")]),s._v(" 中可以使用"),t("code",[s._v("let")]),s._v("、"),t("code",[s._v("var")]),s._v("、"),t("code",[s._v("const")]),s._v("等关键词创建一个变量，程序运行也不会报错。但在当前主流代码规范中，仍然会要求我们对于常量使用"),t("code",[s._v("const")]),s._v("关键词声明，并且全部字母都使用大写，并使用下划线分隔单词。部分严格的代码规范会要求对数字字面量插入下划线以提高可读性。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAX_LENGTH")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100_000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("很巧的是，在 "),t("code",[s._v("Rust")]),s._v(" 中，对于常量的要求，也是一模一样的，并且更为严格一些")]),s._v(" "),t("ol",[t("li",[s._v("常量使用"),t("code",[s._v("const")]),s._v("关键词声明")]),s._v(" "),t("li",[s._v("命名中全部字母都使用大写并使用下划线分隔单词")]),s._v(" "),t("li",[s._v("对数字字面量插入下划线")]),s._v(" "),t("li",[s._v("值的类型必须标注")]),s._v(" "),t("li",[s._v("常量自始至终不可变")])]),s._v(" "),t("p",[s._v("上述常量声明对应是")]),s._v(" "),t("div",{staticClass:"language-rs line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAX_LENGTH")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u32")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100_000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("blockquote",[t("p",[s._v("u32是 "),t("code",[s._v("Rust")]),s._v(" 中的代码标注，表示类型声明，类似于TypeScript的写法。此处表示无符号32位整数，只能存储32位的非负整数值。")])]),s._v(" "),t("h2",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),t("h3",{attrs:{id:"变量命名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量命名"}},[s._v("#")]),s._v(" 变量命名")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v(" 中的变量命名跟 "),t("code",[s._v("Node.js")]),s._v(" 没有区别，除了需要注意基本的规范外，还需要注意"),t("a",{attrs:{href:"https://kaisery.github.io/trpl-zh-cn/appendix-01-keywords.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("关键字"),t("OutboundLink")],1),s._v("的规避。")]),s._v(" "),t("h3",{attrs:{id:"变量绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量绑定"}},[s._v("#")]),s._v(" 变量绑定")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("Node.js")]),s._v(" 中，我们使用"),t("code",[s._v("var")]),s._v(" 、 "),t("code",[s._v("let")]),s._v(" 关键词对变量进行赋值，如")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("而在 "),t("code",[s._v("Rust")]),s._v(" 中，只允许使用 "),t("code",[s._v("let")]),s._v(" 对变量进行赋值，如")]),s._v(" "),t("div",{staticClass:"language-rs line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上述示例可以发现，"),t("code",[s._v("Rust")]),s._v(" 中变量的声明，跟"),t("code",[s._v("Node.js")]),s._v("中的"),t("code",[s._v("let")]),s._v("用法一样，那么这里为什么要说是变量绑定呢，这是因为 "),t("code",[s._v("Rust")]),s._v(" 中有一个核心原则——"),t("strong",[s._v("所有权")]),s._v("，在后续的章节我们详细说明。这里简单理解为，"),t("strong",[s._v("在"),t("code",[s._v("Rust")]),s._v(" 中，任何内存对象都有一个被称为所有者的变量，同时每个值也只有一个所有者")]),s._v("。类似于一个绑定关系，所以这里称之为变量绑定")]),s._v(" "),t("h3",{attrs:{id:"变量可变性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量可变性"}},[s._v("#")]),s._v(" 变量可变性")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("Node.js")]),s._v(" 中，任何变量都是可变的，如")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello JavaScript"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("上述的操作在"),t("code",[s._v("Node.js")]),s._v("是被允许的。但在 "),t("code",[s._v("Rust")]),s._v(" 中，变量在默认情况下是不可变的，一旦为变量绑定一个值，就不能再修改。比如上述代码转换为"),t("code",[s._v("Rust")]),s._v("后，")]),s._v(" "),t("div",{staticClass:"language-rs line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello JavaScript"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("编译后运行，会报错")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("E0384"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": cannot assign twice to immutable variable "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n --"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" src/main.rs:3:3\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       -\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       first assignment to "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       help: consider making this binding mutable: "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("mut a"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello JavaScript"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("具体的错误原因是 "),t("code",[s._v("cannot assign twice to immutable variable a")]),s._v("（无法对不可变的变量进行重复赋值），因为我们想为默认不可变的 a 变量再次赋值。")]),s._v(" "),t("p",[s._v("那可能有些同学就比较迷茫，不能改变值的为啥要叫变量？")]),s._v(" "),t("p",[s._v("其实这是 "),t("code",[s._v("Rust")]),s._v(" 团队设计的语言特性之一。在实际开发中，我们经常遇到一个变量在多处代码中被使用，在其中一部分代码中，该变量的值永远不会发生变化，而在另一部分代码中，该变量的值会被改变。在这种场景编写代码错误，在运行前很难被发现，无形中增大了我们的工作量。")]),s._v(" "),t("p",[t("code",[s._v("Rust")]),s._v("团队采用"),t("code",[s._v("变量默认不可变")]),s._v("的规则，让我们代码变得更加清晰，只有在你需要的变量发生变动时，才能改变，这样就不会造成心智上的负担，也给别人阅读代码带来便利。")]),s._v(" "),t("p",[s._v("在"),t("code",[s._v("Rust")]),s._v("中想让变量可变时，只需要在变量前增加一个关键字 "),t("code",[s._v("mut")]),s._v("，如")]),s._v(" "),t("div",{staticClass:"language-rs line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello JavaScript"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这样的显示声明也会让别人阅读你的代码时，下意识的明白，这个变量在后续会发生变更。")]),s._v(" "),t("h3",{attrs:{id:"变量遮蔽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量遮蔽"}},[s._v("#")]),s._v(" 变量遮蔽")]),s._v(" "),t("p",[t("code",[s._v("Node.js")]),s._v(" 中有一个我们经常使用到，但可能忽略的特性，"),t("code",[s._v("变量遮蔽")]),s._v("，举个简单的例子")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("example")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 内部作用域中声明了一个名为 x 的变量，遮蔽了外部作用域的 x 变量")]),s._v("\n  console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Inner x:"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出内部作用域中的 x 变量，值为 20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("example")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Outer x:"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 外部作用域中的 x 变量仍然可访问，值为 10")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("在这个例子中，函数 "),t("code",[s._v("example")]),s._v(" 内部声明了一个名为 "),t("code",[s._v("x")]),s._v(" 的变量，它遮蔽了外部作用域中的 "),t("code",[s._v("x")]),s._v(" 变量。在函数内部，通过 "),t("code",[s._v("console.log")]),s._v(" 输出的 "),t("code",[s._v("x")]),s._v(" 是内部作用域中的变量，其值为 "),t("code",[s._v("20")]),s._v("。而在函数外部，外部作用域中的 "),t("code",[s._v("x")]),s._v(" 仍然是可访问的，其值为 "),t("code",[s._v("10")]),s._v("。")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("Rust")]),s._v(" 中同样的允许声明相同的变量名，在后面声明的变量会遮蔽掉前面声明的，如")]),s._v(" "),t("div",{staticClass:"language-rs line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-rs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 内部作用域中重新声明了一个名为 x 的变量，遮蔽了外部作用域的 x 变量")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Inner x: {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出内部作用域中的 x 变量，值为 20")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Outer x: {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 外部作用域中的 x 变量仍然可访问，值为 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("在这个例子中，内部作用域中的 "),t("code",[s._v("let x = 20;")]),s._v(" 重新声明了一个名为 "),t("code",[s._v("x")]),s._v(" 的变量，遮蔽了外部作用域中的 "),t("code",[s._v("x")]),s._v(" 变量。在内部作用域中，通过 "),t("code",[s._v("println!")]),s._v(" 输出的 "),t("code",[s._v("x")]),s._v(" 是内部作用域中的变量，其值为 "),t("code",[s._v("20")]),s._v("。而在外部作用域中，外部作用域中的 "),t("code",[s._v("x")]),s._v(" 仍然是可访问的，其值为 "),t("code",[s._v("10")]),s._v("。")]),s._v(" "),t("p",[s._v("细心的同学已经发现了，变量遮蔽和使用 "),t("code",[s._v("mut")]),s._v(" 关键字不同，上述写法中 "),t("code",[s._v("let")]),s._v(" 生成了一个新的变量，只是这个变量恰好跟之前的变量拥有同一个名字，涉及到内存对象的再分配。而 "),t("code",[s._v("mut")]),s._v(" 关键字声明的变量，可以修改同一个内存地址上的值，并不会发生对象的再分配，性能要更好一些。")]),s._v(" "),t("p",[s._v("那既然 "),t("code",[s._v("mut")]),s._v(" 关键字声明的方法性能会更好一些，为什么 "),t("code",[s._v("Rust")]),s._v(" 要设计变量遮蔽的形式呢？")]),s._v(" "),t("p",[s._v("其实我们从之前的例子可以看出，变量遮蔽有助于避免命名冲突和意外的副作用，同时也提供了更灵活的命名空间。当然，过度使用变量遮蔽可能会导致代码可读性降低，因此应谨慎使用。")])])}),[],!1,null,null,null);t.default=e.exports}}]);