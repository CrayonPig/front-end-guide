(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{366:function(s,e,t){"use strict";t.r(e);var a=t(10),n=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"容器化部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器化部署"}},[s._v("#")]),s._v(" 容器化部署")]),s._v(" "),e("p",[s._v("传统的部署方式存在着许多问题，比如手动配置和管理、不稳定性、资源浪费等。为了解决这些问题，容器化部署等新兴的部署方式逐渐受到了广泛的关注和应用。")]),s._v(" "),e("p",[s._v("在容器化部署中，应用程序及其依赖项被打包成容器镜像。这些镜像包含应用程序代码、运行时环境、依赖项、配置文件等，并通过容器运行时引擎（如Docker、Kubernetes等）在不同的计算环境中运行。因为容器镜像是轻量级和可移植的，所以容器化部署可以确保应用程序在任何地方都能以相同的方式运行，而无需担心计算环境的差异性。")]),s._v(" "),e("p",[s._v("容器化部署有许多优点，包括：")]),s._v(" "),e("ul",[e("li",[s._v("可移植性：应用程序和其依赖项在容器中打包，容器镜像可以在不同的计算环境中轻松部署，而不需要担心依赖项或环境变量的变化。")]),s._v(" "),e("li",[s._v("可扩展性：容器可以根据需要动态扩展或缩小，可以根据负载自动调整资源使用量，以确保应用程序在高流量时保持高可用性。")]),s._v(" "),e("li",[s._v("安全性：容器化部署有助于隔离应用程序及其依赖项，以减少安全漏洞的风险。")]),s._v(" "),e("li",[s._v("管理性：容器化部署可以简化应用程序部署和管理，例如升级、回滚、监视、日志记录等操作都可以在一个中心化的位置进行。")])]),s._v(" "),e("h2",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[s._v("#")]),s._v(" Docker")]),s._v(" "),e("p",[s._v("Docker是一种容器化平台，可以将应用程序及其依赖项打包在一个可移植的容器中，以便在任何地方以相同的方式运行。")]),s._v(" "),e("p",[s._v("使用Docker，开发人员可以轻松地将应用程序打包、部署和扩展，同时确保应用程序在不同环境中的一致性。")]),s._v(" "),e("p",[s._v("Docker有如下优点：")]),s._v(" "),e("ul",[e("li",[s._v("隔离性：Docker 容器可以提供应用程序与主机操作系统之间的隔离，使得应用程序可以在任何系统上运行，避免了不同系统环境之间的兼容性问题。")]),s._v(" "),e("li",[s._v("可移植性：Docker 容器可以在不同的环境中运行，从而使得应用程序的部署更加便捷，可以快速地在不同的服务器之间进行迁移和部署。")]),s._v(" "),e("li",[s._v("易于管理：使用 Docker 镜像和容器可以方便地进行应用程序的打包、部署、升级和维护，同时也可以更好地管理多个版本的应用程序。")]),s._v(" "),e("li",[s._v("提高开发效率：使用 Docker 可以提高开发效率，因为开发人员可以在本地环境中测试应用程序，避免了在不同环境中进行测试的麻烦。")]),s._v(" "),e("li",[s._v("节省资源：使用 Docker 部署应用程序可以节省服务器资源，因为 Docker 容器可以共享主机操作系统的内核，避免了虚拟机的额外开销。")])]),s._v(" "),e("p",[s._v("接下来我们尝试用基于 Docker 部署 React :")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("准备 Docker 环境\n首先需要安装 Docker 并启动 Docker 服务。具体安装方法可以参考 Docker 官方文档，这里不再赘述。")])]),s._v(" "),e("li",[e("p",[s._v("编写 Dockerfile\n在 React 应用程序的根目录下创建一个名为 Dockerfile 的文件，并添加以下内容：")])])]),s._v(" "),e("div",{staticClass:"language-Dockerfile line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 基于官方的 Node 镜像")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node:12.16.1-alpine")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置工作目录")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装依赖")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" package*.json ./")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm install")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拷贝应用程序代码")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . .")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 构建应用程序")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm run build")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动命令")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" [ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),s._v(" ]")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[s._v("这个 Dockerfile 的作用是基于官方的 Node 镜像创建一个容器，然后在容器内安装 React 应用程序的依赖，构建应用程序并启动应用程序。")]),s._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[s._v("构建 Docker 镜像\n在终端中进入 React 应用程序的根目录，执行以下命令来构建 Docker 镜像：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker build -t my-react-app .\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("其中，-t 参数用来为镜像命名，. 表示 Dockerfile 的路径为当前目录。")]),s._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[s._v("运行 Docker 容器\n使用以下命令来运行 Docker 容器：")])]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v(":3000 my-react-app\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("其中，-p 参数用来将 Docker 容器的 3000 端口映射到宿主机的 3000 端口，my-react-app 是刚才为 Docker 镜像指定的名称。")]),s._v(" "),e("p",[s._v("现在你就可以在浏览器中访问 http://localhost:3000 来访问你的 React 应用程序了。")]),s._v(" "),e("h2",{attrs:{id:"kubernetes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[s._v("#")]),s._v(" Kubernetes")]),s._v(" "),e("p",[e("code",[s._v("Kubernetes")]),s._v("（通常简称为"),e("code",[s._v("K8s")]),s._v("）是一个用于自动化部署、扩展和管理容器化应用程序的开源平台。")]),s._v(" "),e("p",[s._v("可以用于自动化部署、扩展和管理容器化应用程序。它最初是由 Google 设计并捐赠给 Cloud Native Computing Foundation (CNCF) 的。Kubernetes 的目标是让部署和运行容器化应用程序变得更加容易、高效和可靠。")]),s._v(" "),e("p",[s._v("Kubernetes 的主要功能包括：")]),s._v(" "),e("ul",[e("li",[s._v("容器编排：Kubernetes 可以在集群中部署、管理和扩展容器化应用程序。")]),s._v(" "),e("li",[s._v("自动化部署：Kubernetes 可以自动部署应用程序，并监视它们的状态以确保它们一直在运行。")]),s._v(" "),e("li",[s._v("负载均衡和服务发现：Kubernetes 可以分配应用程序的负载，并自动调整以适应变化的流量。")]),s._v(" "),e("li",[s._v("存储编排：Kubernetes 可以管理应用程序所需的存储资源。")]),s._v(" "),e("li",[s._v("自我修复和弹性：Kubernetes 可以自动修复失败的容器，并根据需要进行扩展。")]),s._v(" "),e("li",[s._v("扩展性：Kubernetes 可以轻松地扩展到支持大型、复杂的应用程序。")])]),s._v(" "),e("p",[s._v("举个例子，假设有一个使用 Node.js 编写的 Web 应用程序。使用 Kubernetes，可以将该应用程序打包成 Docker 容器，并使用 Kubernetes 部署到集群中。Kubernetes 会自动管理容器的状态、存储资源和网络连接，同时可以实现自动扩缩容、故障恢复等功能。这样，就可以轻松地管理、运行和扩展该应用程序，从而节省了时间和成本。")]),s._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),e("p",[s._v("容器化部署是一种新兴的部署方式，它将应用程序和其所有依赖项打包到一个可移植、可复制的容器中，以保证应用程序在不同环境下的一致性。容器化部署可以快速地创建、启动和销毁应用程序，并且容器之间是相互隔离的，因此应用程序之间不会发生冲突。与传统的部署方式相比，容器化部署可以更快地部署、扩展和更新应用程序，同时也可以提高应用程序的可靠性和稳定性。")])])}),[],!1,null,null,null);e.default=n.exports}}]);