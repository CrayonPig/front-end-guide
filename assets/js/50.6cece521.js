(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{360:function(t,e,o){"use strict";o.r(e);var s=o(10),v=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"package-json-字段解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#package-json-字段解析"}},[t._v("#")]),t._v(" package.json 字段解析")]),t._v(" "),e("h2",{attrs:{id:"type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" type")]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("package.json")]),t._v(" 文件中，"),e("code",[t._v("type")]),t._v(" 属性用于指定模块的类型，即模块使用的模块系统。"),e("code",[t._v("type")]),t._v(" 属性的值影响模块的导入和导出方式，以及模块的解析和加载行为。它告诉构建工具、打包工具或者运行时环境如何正确处理模块。")]),t._v(" "),e("p",[t._v("根据不同的值，"),e("code",[t._v("type")]),t._v(" 属性可以有以下几种常见的取值：")]),t._v(" "),e("ol",[e("li",[e("code",[t._v('"commonjs"')]),t._v("：表示模块使用 CommonJS 模块系统。这是 Node.js 默认的模块系统，也是旧版的 JavaScript 模块系统。")]),t._v(" "),e("li",[e("code",[t._v('"module"')]),t._v("：表示模块使用 ES 模块（ES Modules）系统。ES 模块是现代 JavaScript 的官方标准模块系统，它提供了更强大的模块化语法和功能。")]),t._v(" "),e("li",[e("code",[t._v('"umd"')]),t._v("：表示模块既可以在浏览器端使用，也可以在 Node.js 环境中使用。这种类型的模块通常用于跨平台的通用模块，可以通过不同的模块系统进行加载。")]),t._v(" "),e("li",[e("code",[t._v('"module" 和 "main"')]),t._v("：使用这种形式表示模块既可以使用 ES 模块系统，也可以使用 CommonJS 模块系统。这种类型的设置在同时兼容浏览器和 Node.js 的项目中很常见。")])]),t._v(" "),e("p",[t._v("请注意，"),e("code",[t._v("type")]),t._v(" 属性在一些构建工具和平台中可能有特定的用途或扩展，具体的行为可能会有所不同。因此，在使用特定的构建工具或平台时，最好查阅相关文档以了解更多细节。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("不管type字段的值是多少, 以.mjs后缀名的文件总是被当作ES6模块，而以.cjs后缀名的文件总是被当成CommonJS模块，但不建议混用")])])])}),[],!1,null,null,null);e.default=v.exports}}]);