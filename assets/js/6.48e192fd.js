(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{285:function(a,e,t){a.exports=t.p+"assets/img/deploy_mode_3.c5902623.png"},286:function(a,e,t){a.exports=t.p+"assets/img/deploy_mode_1.9d8e1520.png"},287:function(a,e,t){a.exports=t.p+"assets/img/deploy_mode_2.c0828e00.png"},344:function(a,e,t){"use strict";t.r(e);var s=t(10),r=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"版本部署方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本部署方式"}},[a._v("#")]),a._v(" 版本部署方式")]),a._v(" "),e("p",[a._v("在实际项目中，部署并不是单纯的打包构建，扔服务器这个简单的步骤可以概括的。有很多部署方式，我们一起研究下吧。")]),a._v(" "),e("h2",{attrs:{id:"灰度发布-gray-release"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#灰度发布-gray-release"}},[a._v("#")]),a._v(" 灰度发布（Gray Release）")]),a._v(" "),e("p",[a._v("将新版本的部分流量引导到新的发布版本上，可以用于测试、验证和用户反馈。相较于蓝绿部署，灰度发布可以更细粒度地控制新版本的流量，以降低部署风险。例如，可以将新版本的 1% 流量引导到新的发布版本上，然后逐渐增加流量的比例，直到全部流量都切换到新版本上。\n"),e("img",{attrs:{src:t(285),alt:"滚动发布"}})]),a._v(" "),e("h2",{attrs:{id:"金丝雀发布-canary-release"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#金丝雀发布-canary-release"}},[a._v("#")]),a._v(" 金丝雀发布（Canary Release）")]),a._v(" "),e("p",[a._v("类似于灰度发布，但是引导流量的比例更小，例如只有 0.1% 的流量。金丝雀发布主要用于验证新版本的性能和稳定性。如果新版本发生故障，只会影响到少量用户，不会对所有用户产生影响。")]),a._v(" "),e("h2",{attrs:{id:"彩色发布-canary-analysis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#彩色发布-canary-analysis"}},[a._v("#")]),a._v(" 彩色发布（Canary Analysis）")]),a._v(" "),e("p",[a._v("在金丝雀发布的基础上，引入自动化的测试和分析，以决定是否要将流量全部切换到新版本上。例如，可以使用自动化的性能测试工具，比较新旧版本在不同负载下的性能表现，或者使用自动化的异常检测工具，发现新版本中出现的问题并自动回滚。")]),a._v(" "),e("h2",{attrs:{id:"蓝绿部署-blue-green-deployment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#蓝绿部署-blue-green-deployment"}},[a._v("#")]),a._v(" 蓝绿部署（Blue-green deployment）")]),a._v(" "),e("p",[a._v("在部署新版本之前，先将旧版本保留并运行，等新版本运行稳定后再将流量切换到新版本上。这种部署方式可以确保应用程序在更新过程中保持可用性和稳定性。")]),a._v(" "),e("p",[e("img",{attrs:{src:t(286),alt:"蓝绿部署"}})]),a._v(" "),e("h2",{attrs:{id:"滚动发布-rolling-release"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#滚动发布-rolling-release"}},[a._v("#")]),a._v(" 滚动发布（Rolling Release）")]),a._v(" "),e("p",[a._v("将新版本逐步部署到生产环境中，通过逐步增加新版本的实例数量来实现平滑过渡，同时也能够保证系统的稳定性和可用性。与蓝绿部署相比，滚动发布的风险更低，因为只有一部分流量会受到影响，并且可以随时停止部署并回滚到之前的版本。\n"),e("img",{attrs:{src:t(287),alt:"滚动发布"}})]),a._v(" "),e("h2",{attrs:{id:"a-b-测试-a-b-testing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-b-测试-a-b-testing"}},[a._v("#")]),a._v(" A/B 测试（A/B Testing）")]),a._v(" "),e("p",[a._v("将流量引导到两个版本上，例如版本 A 和版本 B，然后收集用户行为和反馈数据，以评估两个版本的效果和差异。例如，在电商网站上，可以将流量引导到两个版本的购物车页面上，然后比较两个版本的转化率、平均订单价、访问时长等指标，以确定哪个版本更优秀。")]),a._v(" "),e("h2",{attrs:{id:"增量部署-incremental-deployment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#增量部署-incremental-deployment"}},[a._v("#")]),a._v(" 增量部署（Incremental Deployment）")]),a._v(" "),e("p",[a._v("将新版本的部分代码或功能增量式地部署到现有系统中。例如，可以将新的服务或模块增量式地加入现有的微服务架构中，以降低部署风险和对现有系统的影响。")]),a._v(" "),e("h2",{attrs:{id:"可重入部署-reentrant-deployment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可重入部署-reentrant-deployment"}},[a._v("#")]),a._v(" 可重入部署（Reentrant Deployment）")]),a._v(" "),e("p",[a._v("在部署新版本之前，保证现有系统可以随时回退到之前的版本。例如，可以使用容器技术，在新版本的容器中运行应用程序，而不会影响到现有的容器集群，从而保证可以随时回退到之前的容器版本。")]),a._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),e("p",[a._v("有这么多的部署方式是因为不同的应用场景和需求有不同的要求和限制，而不同的部署方式可以满足这些不同的需求和限制。例如，如果需要快速迭代和部署新功能，可以选择灰度发布、彩色发布等部署方式；如果需要确保稳定性和高可用性，可以选择滚动发布、蓝绿部署等部署方式；如果需要避免单点故障和提高容错能力，可以选择分布式部署、容器化部署等部署方式。")]),a._v(" "),e("p",[a._v("另外，不同的部署方式还有各自的优缺点，需要根据具体情况进行权衡和选择。因此，在进行部署时，需要综合考虑应用场景、需求和限制等因素，并选择最适合的部署方式")])])}),[],!1,null,null,null);e.default=r.exports}}]);